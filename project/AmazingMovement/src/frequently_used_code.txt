glew32.lib freeglut.lib

// VBO 생성
glGenBuffers(1, &this->m_ID); //1. 버퍼 생성
glBindBuffer(GL_ARRAY_BUFFER, this->m_ID); //2. 바인딩("작업 상태")
glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_DYNAMIC_DRAW);  //3. 작업 상태 버퍼에 데이터 전달

glDrawElements(GL_TRIANGLES, count, GL_UNSIGNED_INT, 0);

glVertexAttribPointer (0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); 

// 설명
void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
- 버텍스 속성 데이터의 배열을 정의
- index: 설정할 vertex 속성의 인덱스 값을 지정. (세이더에서 layout (location = 0)  속성의 위치가 0번째)
- size: 버텍스 속성의 크기 (버텍스 속성이 vec3라면 3)
- type: 데이터 타입 (vec3 라면 GL_FLOAT)
- normalized: 데이터를 정규화할지 (GL_TRUE: [0, 1] 사이의 값으로 정규화, GL_FALSE: 그대로 사용)
- stride: 연이은 vertex 속성 세트들 사이의 공백 (값이 공백없이 채워져 있다면 0, 1개 이상의 속성들이 저장되어 있다면 크기를 설정. 
예) 버텍스 vec3라면 다음 버텍스 위치는 12바이트)
- pointer: 데이터가 시작하는 위치의 오프셋 값
- 각 vertex 속성은 VBO에 의해 관리되는 메모리로부터 데이터를 받는다.
- 데이터를 받을 VBO (하나가 여러 VBO를 가질 수도 있음)는 glVertexAttribPointer 함수를 호출할 때 GL_ARRAY_BUFFER에 현재 바인딩된 VBO로 결정

// 그리기
// VBO
glBindBuffer(GL_ARRAY_BUFFER, center_vbo); // VBO Bind
glVertexAttribPointer(PosLocation, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)(i * 6 * sizeof(float)));
glDrawArrays(GL_LINES, 0, 2); // 설정대로 출력

// EBO
glBindBuffer(GL_ARRAY_BUFFER, four_list); // VBO Bind
glVertexAttribPointer(PosLocation, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
glDrawElements(GL_TRIANGLES,12, GL_UNSIGNED_INT, 0);